// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingBackend.Data;

#nullable disable

namespace TradingBackend.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TradingBackend.Models.PendingOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FailureReason")
                        .HasColumnType("longtext");

                    b.Property<string>("Metal")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("PlacedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("TriggerPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("PendingOrders", (string)null);
                });

            modelBuilder.Entity("TradingBackend.Models.TradeHistory", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Metal")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TradeId");

                    b.HasIndex("UserId");

                    b.ToTable("TradeHistory", (string)null);
                });

            modelBuilder.Entity("TradingBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TradingBackend.Models.UserHoldings", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("AverageGoldPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 4)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("AverageSilverPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 4)")
                        .HasDefaultValue(0m);

                    b.Property<int>("CashReserve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("GoldHolding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SilverHolding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("UserId");

                    b.ToTable("UserHoldings", (string)null);
                });

            modelBuilder.Entity("TradingBackend.Models.PendingOrder", b =>
                {
                    b.HasOne("TradingBackend.Models.User", "User")
                        .WithMany("PendingOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradingBackend.Models.TradeHistory", b =>
                {
                    b.HasOne("TradingBackend.Models.User", "User")
                        .WithMany("TradeHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradingBackend.Models.UserHoldings", b =>
                {
                    b.HasOne("TradingBackend.Models.User", "User")
                        .WithOne("UserHolding")
                        .HasForeignKey("TradingBackend.Models.UserHoldings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradingBackend.Models.User", b =>
                {
                    b.Navigation("PendingOrders");

                    b.Navigation("TradeHistories");

                    b.Navigation("UserHolding")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
